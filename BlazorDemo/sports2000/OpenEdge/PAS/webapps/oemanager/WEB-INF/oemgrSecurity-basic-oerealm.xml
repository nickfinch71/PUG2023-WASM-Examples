<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Application context containing HTTP authentication control
  -->

<b:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:b="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- intercept-url hints
         role names in the access attribute must have "ROLE_" prefixes. What occurs 
         the underscore is up to you.
     -->

    <!-- public access URIs -->
    <http pattern="/index.html" security="none" />
  
    <!-- restricted access URIs -->  
    <http auto-config="false" 
        use-expressions="true" 
        create-session="never" 
        disable-url-rewriting="true" 
        authentication-manager-ref="OEManagerOERealmAuth" 
        realm="PAS OEManager" >

        <!-- OpenEdge CORS Filter -->
        <custom-filter before="SECURITY_CONTEXT_FILTER" 
                       ref="OECORSFilter" />

         <!-- public access URIs -->
        <intercept-url pattern="/*" method="GET" access="hasAnyRole('ROLE_PSCAdmin','ROLE_PSCOper','ROLE_PSCUser')"/>
        
        <!-- URL access controls -->
        <intercept-url pattern="/applications/**" method="GET" 
                    access="hasAnyRole('ROLE_PSCAdmin','ROLE_PSCOper')"/>
        <intercept-url pattern="/applications/**" method="PUT" 
                    access="hasAnyRole('ROLE_PSCAdmin')"/>
        <intercept-url pattern="/applications/**" method="POST" 
                    access="hasAnyRole('ROLE_PSCAdmin')"/>
        <intercept-url pattern="/applications/**" method="DELETE" 
                    access="hasAnyRole('ROLE_PSCAdmin')"/>

        <!-- Best practice - deny anything not explicitly granted. -->
        <intercept-url pattern="/**" access="denyAll()"/>

        <!-- authentication models -->
        <http-basic />

        <!-- login session controls 
             note: comment out if session-creation is stateless -->
        <session-management session-fixation-protection="newSession" />

        <access-denied-handler error-page="/accessdenied.html" />

	<!-- Disable org.springframework.security.web.csrf.CsrfFilter -->
	<csrf disabled="true"/>

    </http>

     <!-- The security filter that implements the CORS standard for controlling
         cross site resource access by http clients. -->
    <b:bean id="OECORSFilter"
             class="com.progress.appserv.services.security.OECORSFilter" >
             <b:property name="allowAll" value="true" />
             <b:property name="allowMethods" value="GET,POST,PUT,DELETE" />
             <b:property name="allowDomains" value="" />
             <b:property name="allowSubdomains" value="false" />
             <b:property name="messageHeaders" value="Accept,Accept-Language,Content-Language,Content-Type,X-CLIENT-CONTEXT-ID,Origin,Access-Control-Request-Headers,Access-Control-Request-Method,Pragma,Cache-control,Authorization" />
             <b:property name="responseHeaders" value="Cache-Control,Content-Language,Content-Type,Expires,Last-Modified,Pragma,X-CLIENT-CONTEXT-ID" />
             <b:property name="supportCredentials" value="true" />
             <b:property name="maxAge" value="-1" />
    </b:bean>                

     <!-- Spring AuthenticationProvider that manages the task of authentication
         using a user account supplied by an AppServer Realm service.  It directly
         uses the OERealmUserDetailsImpl bean to do the real work and
         create a Spring UserDetails object that will be placed in a Spring
         authentication token. 
         
         Do NOT change the Spring userDetailsService reference -->
    <b:bean id="OERealmAuthProvider"
            class="com.progress.appserv.services.security.OERealmAuthProvider" >
            <b:property name="userDetailsService">
                        <b:ref bean="OERealmUserDetails"/>
            </b:property>
            <!--
            <b:property name="createCPAuthn" value="true" />
            <b:property name="multiTenant" value="false" />
            <b:property name="registryFile" value="ABLDomainRegistry.keystore" />
            <b:property name="userDomain" value="" />
            <b:property name="key" value="oech1::23263c143737253a3337" />
            <b:property name="authz" value="false" />
            <b:property name="properties" >
                <b:map>
                     <b:entry key="prop-1" value="string1"/>
                     <b:entry key="prop-2" value="string2"/>
                </b:map>
            </b:property>
            <b:property name="expires" value="600" />
            -->
    </b:bean>

    <!-- Spring UserDetailsService that connects to an AppServer Realm service
         and uses it as a source of user account information during the
         authentication step managed by the OERealmAuthProvider bean.
         
         The sample in this template requires changing the properties
         "realmURL" and "realmClass" to contain the run-time AppServer
         used for authentication and the developer supplied OOABL class
         name.  -->
    <b:bean id="OERealmUserDetails"
            class="com.progress.appserv.services.security.OERealmUserDetailsImpl" >
            <b:property name="realmURL" value="AppServer://localhost:5162/oerealm" />
            <b:property name="realmClass" value="OpenEdge.Security.Realm.HybridRealm" />
            <b:property name="grantedAuthorities" value="ROLE_PSCUser" />
            <b:property name="rolePrefix" value="ROLE_" />
            <b:property name="roleAttrName" value="ATTR_ROLES" />
            <b:property name="enabledAttrName" value="ATTR_ENABLED" />
            <b:property name="lockedAttrName" value="ATTR_LOCKED" />
            <b:property name="expiredAttrName" value="ATTR_EXPIRED" />
            <b:property name="realmPwdAlg" value="0" />
            <!--
            <b:property name="realmTokenFile" value="" />
            -->
    </b:bean>

    <!-- Authentication manager reserved for PUBLIC anonymous authentication 
         to the static and dynamic application content.
     -->
    <authentication-manager id="OEManagerOERealmAuth" >
        <authentication-provider ref="OERealmAuthProvider" />
    </authentication-manager>

</b:beans>
