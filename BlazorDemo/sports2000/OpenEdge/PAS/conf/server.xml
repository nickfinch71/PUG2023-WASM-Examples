<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--
  IMPORTANT ADMINISTRATOR INFORMATION
  Progress Software Corporation has customized this configuration file to 
  use Java system properties that are set and externally configured via
  the Tomcat conf/catalina.properties file.  Removing the Java property
  references ( ${java-prop-nam} ) may impact the operation of other Progress
  utilities that reference and maintain catalina.properties.

  Optional Tomcat features are deliniated by beginning and ending XML
  comment syntax so they can be controlled using the bin/tcman utility's
  'feature' action:

         feature:begin:feature-name:{on|off}
             <... />
         feature:end:feature-name:{on|off} 

     Note:  feature-name in begin and end lines must match exactly for
            length and case sensitivity
-->

<Server port="${psc.as.shut.port}" shutdown="${psc.as.shut.pwd}">
<!-- feature:begin:VersionLoggerListener:off
  <Listener className="org.apache.catalina.startup.VersionLoggerListener"
	    logArgs="${psc.as.versionlogger.logargs}"
	    logEnv="${psc.as.versionlogger.logenv}"
	    logProps="${psc.as.versionlogger.logprops}" />
     feature:end:VersionLoggerListener:off -->

<!-- feature:begin:SecurityListener:off
  <Listener className="org.apache.catalina.security.SecurityListener" 
            checkedOsUsers="root"
            minimumUmask="007" />
     feature:end:SecurityListener:off -->

<!-- feature:begin:APRListener:off
  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
     feature:end:APRListener:off -->

  <!-- Prevent memory leaks due to use of particular java/javax APIs-->
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
  <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

<!-- feature:begin:PSClifecycle:on -->
  <Listener className="com.progress.appserv.services.lifecycle.OeLifecycleListener"/>
<!-- feature:end:PSClifecycle:on -->

<!-- feature:begin:JMXLifecycle:off
  <Listener className="org.apache.catalina.mbeans.JmxRemoteLifecycleListener"
            rmiRegistryPortPlatform="${psc.as.jmxregistry.port}" 
            rmiServerPortPlatform="${psc.as.jmxserver.port}" />  
     feature:end:JMXLifecycle:off -->

  <GlobalNamingResources>
    <Resource name="UserDatabase" auth="Container"
              type="org.apache.catalina.UserDatabase"
              description="User database that can be updated and saved"
              factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
              pathname="${psc.as.usersfile}" />

     <!-- This is resource definition for the ServiceRegistry object placed in JNDI Namespace.
          The declaration below creates a singleton instance of a ServiceRegistry object.
          The object is read/write so that its readable and writable by all the webapp contexts.
     -->
<!-- feature:begin:PSCRegistry:on -->
    <Resource name="ServiceRegistry/ServiceRegistryFactory" auth="Container"
              type="com.progress.appserv.services.naming.ServiceRegistry"
              description="Services database that can be updated and saved"
              factory="com.progress.appserv.services.naming.ServiceRegistryFactory"  
              readonly="false" singleton="true" />
<!-- feature:end:PSCRegistry:on -->

  </GlobalNamingResources>

  <!-- A "Service" is a collection of one or more "Connectors" that share
       a single "Container" Note:  A "Service" is not itself a "Container",
       so you may not define subcomponents such as "Valves" at this level.
       Documentation at /docs/config/service.html
   -->
<!-- feature:begin:HealthCheck:off
  <Service name="HealthCheck">
    <Executor name="HCThreadPool" 
              namePrefix="hcthd-"
              maxThreads="10"
              minSpareThreads="2" />

    <Connector executor="HCThreadPool"
               port="${psc.as.healthcheck.port}"
               protocol="HTTP/1.1"
               scheme="http" 
               secure="false"
               connectionTimeout="${psc.as.http.connectiontimeout}"
               asyncTimeout="${psc.as.msg.timeout}"
               maxPostSize="${psc.as.msg.maxpostsize}"
               maxHttpHeaderSize="8192"
               acceptCount="${psc.as.http.maxqueuesize}"
               maxConnections="-1"
               maxKeepAliveRequests="${psc.as.msg.maxpipeline}"
               xpoweredBy="false" />

    <Engine name="HealthCheck" 
            defaultHost="hchost" 
            jvmRoute="hcroute"
            startStopThreads="0" >
      
      <Realm className="org.apache.catalina.realm.LockOutRealm"
             cacheRemovalWarningTime="${psc.as.realm.removeWarningTime}"
             cacheSize="${psc.as.realm.cacheSize}"
             failureCount="${psc.as.realm.failureCount}" 
             lockOutTime="${psc.as.realm.lockOutTime}" >

        <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
               resourceName="UserDatabase" />
      </Realm>

      <Host name="hchost"  
            appBase="${psc.as.healthcheck.appsdir}"
            unpackWARs="${psc.as.healthcheck.unpackwars}"
            autoDeploy="${psc.as.healthcheck.autodeploy}" >

        <Valve className="org.apache.catalina.valves.RemoteAddrValve"
               allow=".*"/> 

        <Valve className="org.apache.catalina.valves.AccessLogValve" 
               directory="${catalina.base}/logs"
               prefix="hchost_access_log" 
               suffix=".txt"
               pattern="${psc.as.accesslog.pattern}" />

        <Valve className="org.apache.catalina.valves.StuckThreadDetectionValve"
               threshold="${psc.as.stuckthreadthreshold}" />
      </Host>
    </Engine>
  </Service>
     feature:end:HealthCheck:off -->

  <Service name="Catalina">

    <!--The connectors can use a shared executor, you can define one or more named thread pools-->

    <Executor name="tomcatThreadPool" namePrefix="thd-"
              maxThreads="${psc.as.executor.maxthreads}" 
              minSpareThreads="${psc.as.executor.minsparethreads}"/>

<!-- feature:begin:HTTP:on -->
    <Connector executor="tomcatThreadPool"
               port="${psc.as.http.port}" 
               protocol="HTTP/1.1"
               scheme="http" 
               secure="false"
               connectionTimeout="${psc.as.http.connectiontimeout}"
               asyncTimeout="${psc.as.msg.timeout}"
               maxPostSize="${psc.as.msg.maxpostsize}"
               maxHttpHeaderSize="8192"
               acceptCount="${psc.as.http.maxqueuesize}"
               maxConnections="${psc.as.http.maxconnections}"
               maxKeepAliveRequests="${psc.as.msg.maxpipeline}"
               redirectPort="${psc.as.https.port}" 
               URIEncoding="${psc.as.http.uriencoding}"
               compression="${psc.as.http.compress}"
               compressionMinSize="${psc.as.compress.min}"
               noCompressionUserAgents="gozilla,traviata"
               compressibleMimeType="${psc.as.compress.types}"
               bindOnInit="${psc.as.http.bindOnInit}"
               xpoweredBy="false" />
<!-- feature:end:HTTP:on -->

<!-- feature:begin:HTTPS:on -->
    <Connector executor="tomcatThreadPool"
               port="${psc.as.https.port}" 
               protocol="HTTP/1.1" 
               asyncTimeout="10000"
               scheme="https" 
               secure="true"
               maxPostSize="${psc.as.msg.maxpostsize}"
               maxHttpHeaderSize="8192"
               acceptCount="${psc.as.https.maxqueuesize}"
               maxConnections="${psc.as.https.maxconnections}"
               maxKeepAliveRequests="${psc.as.msg.maxpipeline}"
               SSLEnabled="true"
               URIEncoding="${psc.as.http.uriencoding}"
               compression="${psc.as.https.compress}"
               compressionMinSize="${psc.as.compress.min}"
               noCompressionUserAgents="gozilla,traviata"
               compressibleMimeType="${psc.as.compress.types}"
               bindOnInit="${psc.as.https.bindOnInit}"
               xpoweredBy="false"  >

               <SSLHostConfig
                   certificateVerification="${psc.as.https.clientauth}"
                   certificateVerificationDepth="10"
                   ciphers="${psc.as.https.ciphers}"
                   hostName="_default_"
                   protocols="${psc.as.https.protocol}"
                   sessionCacheSize="0"
                   sessionTimeout="${psc.as.https.sessiontimeout}"
                   truststoreFile="conf/tomcat-certstore.jks"
                   truststorePassword="${psc.as.https.trustpass}"
                   truststoreType="${psc.as.https.trustType}" >
                   <Certificate
                       certificateKeyAlias="${psc.as.https.keyalias}"
                       certificateKeystoreFile="${catalina.base}/conf/tomcat-keystore.p12"
                       certificateKeystorePassword="${psc.as.https.keypass}"
                       certificateKeystoreType="${psc.as.https.storeType}"
                       type="UNDEFINED" />
               </SSLHostConfig>
        </Connector>
<!-- feature:end:HTTPS:on -->

<!-- feature:begin:AJP13:off
    <Connector executor="tomcatThreadPool"
               address="${psc.as.ajp13.address}"
               port="${psc.as.ajp13.port}" 
               protocol="AJP/1.3" 
               asyncTimeout="${psc.as.msg.timeout}"
               maxPostSize="${psc.as.msg.maxpostsize}"
               acceptCount="${psc.as.http.maxqueuesize}"
               maxConnections="${psc.as.http.maxconnections}"
               tomcatAuthentication="${psc.as.ajp13.tomcatauth}"
               redirectPort="${psc.as.https.port}" 
               URIEncoding="${psc.as.http.uriencoding}" />
    feature:end:AJP13:off -->

    <Engine name="Catalina" 
        defaultHost="localhost" 
        jvmRoute="${psc.as.alias}" 
        startStopThreads="0" >

<!-- feature:begin:Cluster:off
      <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster" 
         channelSendOptions="${psc.as.clust.sendoptions}">

        <Manager className="org.apache.catalina.ha.session.${psc.as.clust.manager}"
                  expireSessionsOnShutdown="${psc.as.clust.expireOnShut}"
                  notifyListenersOnReplication="${psc.as.clust.notifyListeners}"
                  maxInactiveInterval="${psc.as.clust.inactivetimeout}"/>

        <Channel className="org.apache.catalina.tribes.group.GroupChannel">
          <Membership className="org.apache.catalina.tribes.membership.McastService"
                      address="${psc.as.clust.mcast.addr}"
                      port="${psc.as.clust.mcast.port}"
                      frequency="${psc.as.clust.mcast.freq}"
                      dropTime="${psc.as.clust.mcast.dropafter}" />
          <Receiver className="org.apache.catalina.tribes.transport.nio.NioReceiver"
                    address="${psc.as.clust.recv.addr}" 
                    port="${psc.as.clust.recv.port}" 
                    autoBind="${psc.as.clust.recv.autobind}"
                    selectorTimeout="${psc.as.clust.recv.selectortimeout}" 
                    maxThreads="${psc.as.clust.recv.maxthreads}"
                    tcpNoDelay="${psc.as.clust.recv.nodelay}"
                    timeout="${psc.as.clust.recv.timeout}" />
          
          <Sender className="org.apache.catalina.tribes.transport.ReplicationTransmitter">
            <Transport className="org.apache.catalina.tribes.transport.nio.PooledParallelSender"/>
          </Sender>

          <Interceptor className="org.apache.catalina.tribes.group.interceptors.TcpFailureDetector"/>
          <Interceptor className="org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor"/>
        </Channel>

        <Valve className="org.apache.catalina.ha.tcp.ReplicationValve" filter=""/>
        <Valve className="org.apache.catalina.ha.session.JvmRouteBinderValve"/>
        <ClusterListener className="org.apache.catalina.ha.session.ClusterSessionListener"/>
      </Cluster>
    feature:end:Cluster:off -->

      <Realm className="org.apache.catalina.realm.LockOutRealm"
          cacheRemovalWarningTime="${psc.as.realm.removeWarningTime}"
          cacheSize="${psc.as.realm.cacheSize}"
          failureCount="${psc.as.realm.failureCount}" 
          lockOutTime="${psc.as.realm.lockOutTime}" >

<!-- feature:begin:UserDatabase:on -->
        <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
            resourceName="UserDatabase" />
<!-- feature:end:UserDatabase:on -->

<!-- feature:begin:JAASRealm:off
        <Realm className="org.apache.catalina.realm.JAASRealm"
               appName="TCRealm"
               configFile="tomcat-jaas.config"
               userClassNames="org.foobar.realm.FooUser"
               roleClassNames="org.foobar.realm.FooRole" /> 
    feature:end:JAASRealm:off -->

<!-- feature:begin:LDAPRealm:off
        <Realm className="org.apache.catalina.realm.JNDIRealm"
               connectionURL="ldap://localhost:389"
               userPattern="uid={0},ou=people,dc=mycompany,dc=com"
               roleBase="ou=groups,dc=mycompany,dc=com"
               roleName="cn"
               roleSearch="(uniqueMember={0})" />
    feature:end:LDAPRealm:off -->

      </Realm>

      <Host name="localhost"  
            appBase="${psc.as.webappdir}"
            unpackWARs="${psc.as.unpackwars}" 
            autoDeploy="${psc.as.autodeploy}">

<!-- feature:begin:PASInstrument:off
        <Valve className="com.progress.appserv.services.valve.PASValve" />
    feature:end:PASInstrument:off -->

<!-- feature:begin:RemoteHostValve:on -->
        <Valve className="org.apache.catalina.valves.RemoteHostValve"
               allow=".*"/>
<!-- feature:end:RemoteHostValve:on -->

<!-- feature:begin:RemoteAddrValve:on -->
        <Valve className="org.apache.catalina.valves.RemoteAddrValve"
               allow=".*"/> 
<!-- feature:end:RemoteAddrValve:on -->

<!-- feature:begin:SingleSignOn:on -->
        <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
<!-- feature:end:SingleSignOn:on -->

<!-- feature:begin:AccessLog:on -->
        <Valve className="ch.qos.logback.access.tomcat.LogbackValve" 
               quiet="true" filename="conf/logging-access.xml" />
<!-- feature:end:AccessLog:on -->

<!-- feature:begin:CrawlerSessionManager:on -->
        <Valve className="org.apache.catalina.valves.CrawlerSessionManagerValve" />
<!-- feature:end:CrawlerSessionManager:on -->

<!-- feature:begin:StuckSessionValve:off
        <Valve className="org.apache.catalina.valves.StuckThreadDetectionValve"
               threshold="${psc.as.stuckthreadthreshold}" />
     feature:end:StuckSessionValve:off -->

      </Host>
    </Engine>
  </Service>
</Server>
