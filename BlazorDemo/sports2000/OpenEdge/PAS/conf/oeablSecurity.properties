##########################################################################
 ##                                                                      ##
 ## Copyright (c) 2018-2019 by Progress Software Corporation             ##
 ##                                                                      ##
 ## All rights reserved.  No part of this program or document may be     ##
 ## reproduced in any form or by any means without permission in writing ##
 ## from Progress Software Corporation.                                  ##
 ##                                                                      ##
 ##########################################################################
 #
 # Spring Security bean properties definition file for all oeabl.war based
 # web applications found in a PASOE instance
 #
 # The properties values found in this file constitute the full superset of
 # all Spring Security configuration properties and their values.  Any
 # property value declared in this file may superseded by a declaration found
 # in the oeabl based web application's WEB-INF/oeablSecurity.properties
 # file, which has a basic subset of commonly changed properties.
 #
 # PAS for OE will resolve properties by loading multiple .properties files
 # and using the last declared value it finds.  The minimum requirement
 # is that PAS for OE must find one oeablSecurity.properties file in one
 # of the following locations:
 #     1) conf/oeablSecurity.properties
 #     2) conf/<abl-app-name>/oeablSecurity.properties
 #     3) webapps/<web-app-name>/WEB-INF/oeablSecurity.properties
 # 
 # The best practice is to declare the properties and values that span 
 # multiple web applications in the conf/oeablSecurity.properties file.
 # 
 # Then declare the property and value that may differ between multiple
 # oeabl based web applications in either the web application's 
 #  conf/<web-app-name>/oeablSecurity.properties 
 #  
 # Last, declare the property and value that differs between multiple
 # web applications mapped to the same ABL business application in:
 #  WEB-INF/oeablSecurity.properties file.
 # 
 # The web application develop may also choose to include the full superset
 # of Spring Security properties in their web application's 
 #  conf/<web-app-name>/oeablSecurity.properties 
 #      OR
 #  WEB-INF/oeablSecurity.properties file.
 # 
 # -------------------- oeablSecurity.properties ------------------------------
 # Detailed information about the properties found in this property file 
 # may be found in the file:
 #
 #          conf/oeablSecurity.properties.README.
 #
 ##########################################################################
 ##
 ##%% version 0001
 ##%% Apr 05, 2018 2:29:12 PM
 
 ################# Spring Security Directory ##############################
 ## This property sets the direcotory where spring configuration filse located
 ##  Default value is <catalina.home>/common/spring
 ##  It applies to all web applications of the PASOE instance
 ##  Users also may use a separate set of Srping configuration files for each
 ##  web application. 
 ##  To do this:
 ##     1. Copy all files from <catalina.home>/common/spring to each web application
 ##         of the PASOE instance: 
 ##         <catalina.base>/webapps/<web app>/WEB-INF/spring
 ##     2. Modify spring.dir value:
 ##         spring.dir=file:/${catalina.base}/webapps/${oeabl.webapp.name}/WEB-INF/spring
 ##         
  spring.dir=file:${catalina.home}/common/spring
 
 
 ################# Authentication Manager Name list #####################
 ## The following names apply to the authmanager properties in the
 ##  various transports:
 ##  http.apsv.authmanager
 ##  http.soap.authmanager
 ##  http.rest.authmanager
 ##  http.web.authmanager
 ##  http.authmanager
 ##
 ##  Authentication Managers will only apply to loginModels that perform 
 ## direct logins using user accounts.  Therefore, this property is used only
 ## for 'basic' and 'form' login models (below)
 ##
 ##  http.all.authmanager will apply the same authentication to all transports.
 ##
 ##      manager name        Description
 ##    ===================================================================
 ##    local                 web application WEB-INF/user.properties 
 ##    extlocal              web application WEB-INF/user.properties w. 
 ##                              encrypted passwords
 ##    ldap                  LDAPv3 Directory Service client (simple)
 ##    ad                    Microsoft Active Directory Service client
 ##    oerealm               ABL class callback to application accounts
 ##    sts                   OpenEdge Authentication Gateway client
 ##
 ##  The http.xxxx.authmanager properties will be ignored for the following
 ##  client.login.model configurations:
 ##     oauth2
 ##     saml
 ##     anonymous
 ##
 http.all.authmanager=local

################## The HTTP client Authentication Model to use ##########
 ## This property controls which HTTP client authentication model is used
 ## between the PASOE client application and the PASOE server application
 ## for the .  The allowed names are:
 ##
 ##      name                Description
 ##    ===================================================================
 ##     anonymous            No user login - all clients have public access
 ##     basic                Users authenticate using the HTTP BASIC standard
 ##     form                 Users authenticate using a HTTP POST message & 
 ##                          form data
 ##     container            Users authenticate via Tomcat realm services and 
 ##                          authorize URL access via Spring Security
 ##     sso                  OpenEdge Single Sign-on using ClientPrincipal 
 ##                          access tokens 
 ##     oauth2               OpenEdge support for validating OAuth2 JWT
 ##                          tokens for URL Authorization
 ##     saml                 Users authenticate and authorize using SAML token
 ##
 client.login.model=anonymous

 ################## Container (Tomcat) Role mapping properties #################
 ## This property is used by the 'container' Login Model configuration.  It
 ## provides a [comma separated - no whitespace] list of Role names supplied
 ## by the Tomcat realm login token that will be passed through to Spring's
 ## URL authorization.
 ##
 ## Each PAS for OE transport and the default URI space has its own settable
 ## list. The property http.jee.all.mappableRoles can be used to set all
 ## transports & default at one time.
 ##
 http.jee.all.mappableRoles=ROLE_PSCUser,ROLE_PSCAdmin,ROLE_PSCOper
 http.jee.apsv.mappableRoles=${http.jee.all.mappableRoles}
 http.jee.soap.mappableRoles=${http.jee.all.mappableRoles}
 http.jee.rest.mappableRoles=${http.jee.all.mappableRoles}
 http.jee.web.mappableRoles=${http.jee.all.mappableRoles}
 http.jee.mappableRoles=${http.jee.all.mappableRoles}


 #################APSV Transport Specific Property #######################
 ## For APSV Transport authentication and authorization is disable by default 
 ## i.e. apsv.security.enable=none. 
 ##
 ## If there is a requirement to enable this in production, then set 
 ## apsv.security.enable property value as "basic".
 ##    Example: apsv.security.enable=basic
 ##
 ## It can also be set to container where Users authenticate via Tomcat realm
 ## services and authorize URL access via Spring Security.
 ##    Example: apsv.security.enable=container
 ##
 ## The http.apsv.authprovider property is used to configure the authentication
 ## manager as per production need.
 ##########################################################################
 
 http.apsv.authmanager=${http.all.authmanager}
 http.apsv.realm=${http.all.realm}
 apsv.security.enable=none
 
 
 #################SOAP Transport Specific property ########################
 ## For SOAP Transport authentication and authorization is disable by default 
 ## i.e. apsv.security.enable=none. 
 ##
 ## If there is a requirement to enable this in production, then set 
 ## soap.security.enable property value as "basic".
 ##    Example: soap.security.enable=basic
 ##
 ## The http.soap.authprovider property is used to configure the authentication
 ## manager as per production need.  
 ##########################################################################
 soap.security.enable=none
 http.soap.authmanager=${http.all.authmanager}
 http.soap.realm=${http.all.realm}
 
 #################REST Transport Specific property ########################
 ## The http.rest.authprovider property is used to configure the authentication 
 ## manager as per production need.  
 ##########################################################################
 http.rest.authmanager=${http.all.authmanager}
 http.rest.realm=${http.all.realm}
 
 #################WEB Transport Specific property #########################
 ## The http.web.authprovider property is used to configure the authentication 
 ## manager as per production need.  
 ##########################################################################
 http.web.authmanager=${http.all.authmanager}
 http.web.realm=${http.all.authmanager}

 ###############File system Transport (/** URI space)  ####################
 ## <http pattern="/**" .../>
 ## The http.authprovider property is used to configure the authentication 
 ## manager as per production need.  
 ##########################################################################
 http.authmanager=${http.all.authmanager}

 ## Set all individual transports using these properties
 http.all.realm=OpenEdge
 
 ############# common login model URL access-control properties ##########
 ## This common set of properties applies to the OEMetadataSource bean
 ## that loads intercept-url configurations from a .CSV file.  
 ## 
 ##  NOTE: the anonymous Login Model configuration has its own static
 ##        built-in URL access controls and oeablSecurity.csv file is
 ##        ignored
 ## 
 #########################################################################
 oemetadatasource.all.requestmatcher=ant
 oemetadatasource.all.csvpath=WEB-INF/oeablSecurity.csv

 #############Default Filter Configuration ################################
 ## This is the common section for all the transports(apsv,soap,rest,web) to 
 ## configure common filter beans like [pre-auth,ClientPrinciple & Cors] 
 ## based upon the selected spring security.
 ##
 ## Bean properties naming should follow the format "<bean-id>.<prop-name>=value"
 #########################################################################
 
 ############# Form login page & URI properties  #########################
 http.formlogin.loginpage=/static/auth/login.jsp
 http.formlogin.loginurl=/static/auth/j_spring_security_check
 http.formlogin.usedefaulttarget=false
 http.formlogin.defaulturl=/
 http.formlogin.failureurl=/static/auth/loginfail.html
 http.formlogin.usernamefield=j_username
 http.formlogin.userpasswordfield=j_password

 ############# Form logout page & URI properties ##########################
 http.logout.url=/static/auth/j_spring_security_logout
 http.logout.invalidate=true
 http.logout.deletecookie=JSESSIONID


 ################# sso login manager SSO properties ########################
 ##The Pre-auth security filter for  'sso' Login Model
 ## PreAuthentication and preauthAuthProvider properties are used for 
 ## Rollbase integration.
 ##
 ## By default, this filter is disabled, if any user already authenticated or 
 ## authorized by Rollbase then it skips all the authentication configurations 
 ## and directly access the OpenEdge services after validation
 ##
 ##  To turn on Rollbase SSO:
 ##    1. Set "enabled" property to true 
 ##	   2. Supply the absolute path of a 'registryFile' 
 ##       generated using OpenEdge's $DLC/bin/gendomreg.bat utility as 
 ##       "registryFile" property
 
 OEPreauthfilter.enabled=false
 OEPreauthfilter.registryFile=ABLDomainRegistry.keystore
 
 preauthAuthProvider.rolePrefix=ROLE_
 preauthAuthProvider.enabledAttrName=ATTR_ENABLED
 preauthAuthProvider.lockedAttrName=ATTR_LOCKED
 preauthAuthProvider.expiredAttrName=ATTR_EXPIRED
 

 ################# ClientPrincpal creation properties ######################
 ## Properties for the OEClientPrincipalFilter bean 
 ## This security filter turns an authenticated client's Spring token into an 
 ## OpenEdge ClientPrincipal object. The filter is thus responsible for:
 ##  1. Creating a ClientPrincipal if one was not created in a previous 
 ##     authentication process step
 ##  2. If the previous authentication process produced a Spring token - 
 ##     copy that information into the ClientPrincipal
 ##  3. If the ClientPrincipal is not already sealed - seal it is using this 
 ##     filter's domain and registry configuration
 ##  4. If enablecp is true, then send the ClientPrincipal to the ABL business 
 ##     logic
 ##
 ## NOTE: The oerealm Authentication Manager configuration does not use these
 ##       properties.  Because of the nature of calling the ABL language, 
 ##       special property handling is required and most of the ClientPrincipal
 ##       properties are replicated there.
 ##

 OEClientPrincipalFilter.enabled=true
 OEClientPrincipalFilter.registryFile=ABLDomainRegistry.keystore
 OEClientPrincipalFilter.domain=
 OEClientPrincipalFilter.roles=
 OEClientPrincipalFilter.authz=true
 OEClientPrincipalFilter.expires=0
 OEClientPrincipalFilter.accntinfo=false
 OEClientPrincipalFilter.ccid=false
 OEClientPrincipalFilter.anonymous=false
 OEClientPrincipalFilter.sealAnonymous=false
 OEClientPrincipalFilter.appName=OE
 OEClientPrincipalFilter.passthru=false
 OEClientPrincipalFilter.forwardToken=false
 OEClientPrincipalFilter.domainRoleFilter=
 OEClientPrincipalFilter.loadAccntAttrList=
 OEClientPrincipalFilter.validateClientDomain=false

## DO NOT USE
 OEClientPrincipalFilter.properties.prop-1=
 OEClientPrincipalFilter.properties.prop-2=
 
# Declare placeholders for up to 10 OEClientPrincipalFilter
# properties.  Any number of properties larger than 10 
# requires customization of authFilters.xml.
#
# Any property 'key' value whose first character is a
# comment (#) is ignored when creating a Client-Principal
# token
 OEClientPrincipalFilter.properties.1.key=#doNotAdd
 OEClientPrincipalFilter.properties.1.value=

 OEClientPrincipalFilter.properties.2.key=#doNotAdd
 OEClientPrincipalFilter.properties.2.value=
 
 OEClientPrincipalFilter.properties.3.key=#doNotAdd
 OEClientPrincipalFilter.properties.3.value=
 
 OEClientPrincipalFilter.properties.4.key=#doNotAdd
 OEClientPrincipalFilter.properties.4.value=
 
 OEClientPrincipalFilter.properties.5.key=#doNotAdd
 OEClientPrincipalFilter.properties.5.value=
 
 OEClientPrincipalFilter.properties.6.key=#doNotAdd
 OEClientPrincipalFilter.properties.6.value=
 
 OEClientPrincipalFilter.properties.7.key=#doNotAdd
 OEClientPrincipalFilter.properties.7.value=
 
 OEClientPrincipalFilter.properties.8.key=#doNotAdd
 OEClientPrincipalFilter.properties.8.value=
 
 OEClientPrincipalFilter.properties.9.key=#doNotAdd
 OEClientPrincipalFilter.properties.9.value=
 
 OEClientPrincipalFilter.properties.10.key=#doNotAdd
 OEClientPrincipalFilter.properties.10.value=
 
 ################# CORS security filter properties #########################
 ## Properties for the OECORSFilter Filter bean 
 ## The security filter that implements the CORS standard for controlling
 ## cross site resource access by http clients.

 OECORSFilter.responseHeaders=Cache-Control,Content-Language,Content-Type,Expires,Last-Modified,Pragma,X-CLIENT-CONTEXT-ID
 OECORSFilter.allowAll=true
 OECORSFilter.allowDomains=
 OECORSFilter.allowSubdomains=false
 OECORSFilter.allowMethods=GET,POST,PUT,DELETE,OPTIONS,PATCH
 OECORSFilter.messageHeaders=Accept,Accept-Language,Content-Language,Content-Type,X-CLIENT-CONTEXT-ID,Origin,Access-Control-Request-Headers,Access-Control-Request-Method,Pragma,Cache-control,Authorization
 OECORSFilter.supportCredentials=true
 OECORSFilter.maxAge=-1

 ################# 'sso' Login Model producer/consume properties ###########
 ## Common OpenEdge SSO Producer and Consumer properties
 ## (see properties for OESSOTokenManager, OESSOFilter, OESSORefreshFilter )
 OESSO.error.detail=0
 OESSO.require.https=true
 
 ## Properties for the OEAuthnSuccessHandler bean 
 ## The OEAuthnSuccessHandler bean interfaces with the OE ClientPrincipal SSO 
 ## token producer OESSOTokenManager after a successful user login.  The 
 ## OESSOTokenManager produces a sealed OECP token that is returned to the
 ## client in the body of the HTTP response.
 ##
 ## The OEAuthnSuccessHandler bean has two properties to control:
 ##   a) The requirement for the client to use HTTPS and protect the returned
 ##      OECP token from theft. 
 ##   b) The amount of error detail that may be returned to the client in the
 ##      event an error occurs while generating the OECP token.
 OEAuthnSuccessHandler.tokenErrorDetail=${OESSO.error.detail}
 OEAuthnSuccessHandler.tokenSecure=${OESSO.require.https}

 ## Properties for the OEAuthnFailureHandler (see authFilters.xml)
 ## The OEAuthnFailureHandler is called when a user account validation fails
 ## and in this case, it will return a SSO failure to the caller if SSO is
 ## enabled. 
 OEAuthnFailureHandler.tokenErrorDetail=${OESSO.error.detail}

 ## Properties for the OEFormEntryPoint bean (see authFilters.xml)
 ## The OEFormEntryPoint bean is invoked when a HTTP request requires user login
 ## services.  It interfaces with the OESSOTokenManager bean to determine if an
 ## SSO, JSON, or HTML type of response message is returned.
 ##
 ## The OEFormEntryPoint bean has one properties to control:
 ##   a) The amount of error detail that may be returned to the client in the
 ##      event an error occurs while generating the OECP token.
 OEFormEntryPoint.tokenErrorDetail=${OESSO.error.detail}

 ## Properties for the OESSOTokenManager bean (see authFilters.xml)
 ## The OESSOTokenManager bean is the primary component for the verification 
 ## and generation of OECP SSO tokens.  The OESSOTokenManager works a
 ## supporting role for other Spring filter beans that are actively involved
 ## in the HTTP request authentication process.
 ##
 OESSOTokenManager.tokenPolicy=disabled
 OESSOTokenManager.ssoTokenURLOption=OECP
 OESSOTokenManager.ssoTokenExpires=3600
 OESSOTokenManager.ssoAllowScope=
 OESSOTokenManager.ssoGrantScope=
 OESSOTokenManager.ssoTokenRefresh=true
 OESSOTokenManager.ssoRefreshDeltaTime=3600
 OESSOTokenManager.springRolePrefix=

 ## Properties for the OESSOFilter bean (see authFilters.xml)
 ## The OESSOFilter bean is injected into the HTTP authentication process
 ## to look for HTTP [Authorization] header that contains an OECP SSO token.
 ## If no header and token is found, it passes control to the next step
 ## in the authentication process.  If a header and token is found it will
 ## use the OESSOTokenManager to extract, verify, and convert the OECP
 ## SSO token into a native OE ClientPrincipal token that is passed to the
 ## ABL session.
 ##
 ## The OESSOFilter bean has properties that control what header to look
 ## for in the HTTP request, what the header's authentication-scheme name
 ## is, and whether OECP SSO is enabled.
 OESSOFilter.authPolicy=disabled
 OESSOFilter.authmanager=${http.all.authmanager}
 OESSOFilter.authScheme=OECP
 OESSOFilter.authClientType=*
 OESSOFilter.authErrorDetail=${OESSO.error.detail}
 OESSOFilter.authSecurity=${OESSO.require.https}

 ## Properties for the OESSORefreshFilter bean (see authFilters.xml)
 ## The OESSORefreshFilter bean is injected into the authentication process
 ## and intercepts client requests to refresh an expired OECS SSO token.
 ## If no request is found, the bean passes the request to the next step
 ## in the authentication process.  When a request if found, it interfaces
 ## with the OESSOTokenManager to validate the refresh request and issue 
 ## an updated OECP SSO token that has a new expiration date.
 ## 
 ## The OESSORefreshFilter has properties that allow it to recognize when
 ## a HTTP request is asking to refresh a SSO token.
 OESSORefreshFilter.refreshURL=/static/auth/token
 OESSORefreshFilter.refreshURLOption=refresh
 OESSORefreshFilter.refreshClientType=*
 OESSORefreshFilter.refreshErrorDetail=${OESSO.error.detail}
 OESSORefreshFilter.refreshSecure=${OESSO.require.https}

 ########## 'local' & 'localext' user account file properties #############
 ## Default configuration of authentication bean properties. This needs to be 
 ## change with other values as per the production configuration. It has 
 ## separate section for authentication manager beans like local, ldap, 
 ## oerealm.

 ##-------------local & extlocal authmanager configuration ----------------
 local.userservice.properties=/WEB-INF/users.properties


 ########## 'ldap' Authentication Manager properties #######################
 ## Required LDAP Server Authentication Manager configuration properties

 ## Required LDAP URL: {ldap|ldaps}://<hostname>:<port>
 ldap.url=ldap://hostname:389

 ## Required Directory Server ROOT DN. Unique, per installation, value
 ldap.root.dn=dc=acme,dc=com

 ## Required LDAP login user account UPN/DN used to locate the LDAP user 
 ## account being authenticated and obtain its login ID (i.e. DN)
 ##
 ## Generic LDAP Server's MUST be an LDAP DN of the user account
 ## Example: cn=fred,ou=users,dc=acme,dc=com
 ##
 ## Active Directory LDAP servr MAY be an LDAP DN, OR it may be an 
 ## UPN (User Principal Name) Example: username@ad-domain
 ##
 ldap.manager-dn=bsmithf@acme.com

 ## Required passowrd used with the ldap.manager-dn user account.  
 ## It has no affect on the user being authenticated.  The value may be 
 ## clear-text or a value generated by the utility:  
 ##    DLC/bin/stspwdutil encrypt <clear-text-pwd>
 ##
 ldap.manager-password=secret

 ## Where and how to being searching for the user's account being authenticated
 ldap.usersearch.base=
 ldap.usersearch.searchSubtree=true

 ## Default LDAP Server user account search filter.  Edit if necessary.
 ## ActiveDirectory [default]: (|(userPrincipalName={0}) (sAMAccountName={0}) (mail={0}) (cn={0})) 
 ## Generic LDAP Directory:    (|(mail={0}) (cn={0}))
 ldap.usersearch.filter=(|(userPrincipalName={0}) (sAMAccountName={0}) (mail={0}) (cn={0}))


 ## Where and how to search for the authenticated user's LDAP groups, and how to
 ## convert the located LDAP group object's attribte value into a Spring ROLE
 ldap.groupsearch.base=
 ldap.grouprole.attribute=cn
 ldap.groupsearch.searchSubtree=true

 ## Search for the existance of an LDAP group the authenticated LDAP user 
 ## account has been graned membership in.  Each LDAP group object found
 ## is used as the Spring/Client-Princpal ROLE attributes 
 ## Active Directory [default]:  (&(objectclass=group) (member={0}))
 ## Generic LDAP Directory:      (|(&(objectclass=groupofnames) (member={0})) (&(objectclass=groupofuniquenames) (uniqueMember={0})) )
 ldap.groupsearch.filter=(&(objectclass=group) (member={0}))

 ##---------------------------------------------------------------------------
 ## Optional LDAP Server Authentication Manager configuration properties
 ##---------------------------------------------------------------------------


 ## Follow LDAP server referral objects
 ldap.contxtSrc.referral=ignore

 ## Connection/read timeout in seconds
 ldap.contxtSrc.timeout=5000

 ## Prefix for LDAP group attribute name to identify it as a Spring ROLE name
 ldap.authpopulator.rolePrefix=ROLE_

 ## Ignore Active Directory exceptions for very large return result-sets
 ldap.authpopulator.ignorePartialResultException=true

 ## Convert all LDAP group attribute names used as Spring ROLES to uppercase
 ldap.authpopulator.convertToUpperCase=true

 ##---------------------------------------------------------------------------
 ## Advanced LDAP Authentication Manager configuration properties 
 ##
 ##   DO NOT MODIFY THESE PROPERTIES EXCEPT IN THE CASE WHERE
 ##   THE LDAP SERVER CONFIGURATION AND ARCHITECURTE IS VERY 
 ##   CUSTOMIZED.   REFER TO THE SPRING SECURITY DOCUMENTAITON
 ##   FOR DETAILED SPRING BEAN CONFIGURATION PROPERTIES.
 ##---------------------------------------------------------------------------
 ## The advanced LDAP Server configuration properties are used for customized 
 ## Active Directory or generic LDAP Server whose object design and/or schema
 ## is specific to the enterprise.  Most times you will not require to make
 ## changes, but the properties are exposed here for reference and when 
 ## customizations are required.
 ##

 ## Deprecated 'ldap' properties: map old names to new names for older
 ## authManagers.xml
 ldap.search.base=${ldap.usersearch.base}
 ldap.search.subtree=${ldap.usersearch.searchSubtree}
 ldap.serach.attribute=${ldap.usersearch.filter}
 
 ## Properties for the 'ldap' Authentication Manager (see authManager.xml)
 ##	The LDAP authentication provider plug-in, with its references to the beans 
 ## that implement binding to the service, populating roles, and how to make a 
 ## connection.
 ##
 ## Authprovider properties
 ##  1. 'ldap.authprovider.useAuthenticationRequestCredentials' Determines 
 ##       whether the supplied password will be used as the credentials in the 
 ##       successful authentication token. Default value is false.
 ## 
 ##
 ldap.authprovider.useAuthenticationRequestCredentials=false
 
 ## The ldap Authentication Manager properties below are used in advanced LDAP 
 ## Server user authentication to compensate for individual enterprise 
 ## configuration differences.  Normally, you do not have to change these
 ## property values.

 ## Properties for the 'ldap' Authentication Manager (see authManager.xml)
 ## connection to the LDAP Server.
 ## 
 ldap.contxtSrc.url=${ldap.url}
 ldap.contxtSrc.base=${ldap.root.dn}
 ldap.contxtSrc.userDn=${ldap.manager-dn}
 ldap.contxtSrc.password=${ldap.manager-password}

 ## Properties to describes which LDAP user account role memberships (aks. 
 ## Spring authorities) to return into the security token to be used by the 
 ## application's authorization processes.  The authorities are found by 
 ## searching the LDAP directory for objects whose attributes contain the 
 ## user accounts fully qualified DN as a member
 ##
 ## LDAP Authorities Populator properties
 ##    1. 'ldap.authpopulator.searchBase' search base
 ##    2. 'ldap.authpopulator.groupSearchFilter' Where to begin searching 
 ##       for user group memberships in the directory service
 ##    3. 'ldap.authpopulator.groupRoleAttribute' Map the LDAP group object 
 ##       attribute name to a Spring ROLE name
 ##    4. 'ldap.authpopulator.searchSubtree' How deep in the directory tree 
 ##       to search to user group memberships
 ##    5. 'ldap.authpopulator.ignorePartialResultException' Ignore Active 
 ##       Directory mapping objects
 ##    6. 'ldap.authpopulator.convertToUpperCase' Convert LDAP [group] ROLE 
 ##       names to upper case; default is true
 ##    7. 'ldap.authpopulator.rolePrefix' Assign a Spring Role name prefix; 
 ##       default is ROLE_
 ##
 ## WARNING: The ldap authentication provider upper cases all role names found 
 ## for the authenticated user in the directory service. This affects setting 
 ## the role names in the above <intercept-url> elements.  
 ##    Example: ldap name "OEUsers" Spring role name "ROLE_OEUSERS"
 ## 
 ldap.authpopulator.searchBase=${ldap.groupsearch.base}
 ldap.authpopulator.groupSearchFilter=${ldap.groupsearch.filter}
 ldap.authpopulator.groupRoleAttribute=${ldap.grouprole.attribute}
 ldap.authpopulator.searchSubtree=${ldap.groupsearch.searchSubtree}
 
 
 ########## 'oerealm' Authentication Manager properties #######################
 ## Properties that connects to an MS-Agent Realm service and uses it as a 
 ## source of user account information during the Spring authentication process.
 ## These properties are special case versions of the ClientPrincpalFilter
 ## property set and only apply to the 'oerealm' Authentication Mangaer.
 ##
 ## "realmURL" configuration is DEPRECATED and will only accept either "internal://nxgas" or "internal://localhost/nxgas" value if specified.
 ##

 ## Properties for the 'oerealm' Authentication Manager's use of the
 ## MS-Agent's OERealm server OOABL class
 ##

 OERealm.UserDetails.realmURL=internal://nxgas
 OERealm.UserDetails.realmClass=OpenEdge.Security.Realm.HybridRealm
 OERealm.UserDetails.grantedAuthorities=ROLE_PSCUser
 OERealm.UserDetails.rolePrefix=ROLE_
 OERealm.UserDetails.roleAttrName=ATTR_ROLES
 OERealm.UserDetails.enabledAttrName=ATTR_ENABLED
 OERealm.UserDetails.lockedAttrName=ATTR_LOCKED
 OERealm.UserDetails.expiredAttrName=ATTR_EXPIRED
 OERealm.UserDetails.propertiesAttrName=
 OERealm.UserDetails.userIdAttrName=
 OERealm.UserDetails.realmPwdAlg=0
 OERealm.UserDetails.certLocation=
 OERealm.UserDetails.appendRealmError=false
 OERealm.UserDetails.realmTokenFile=
 

 ## 'oerealm' Authentication Manager specific Client-Principal generation
 ## properties
 OERealm.AuthProvider.multiTenant=true
 OERealm.AuthProvider.userDomain=
 OERealm.AuthProvider.accntinfo=true
 OERealm.AuthProvider.authz=true
 OERealm.AuthProvider.expires=0
 OERealm.AuthProvider.sealClientPrincipal=true
 OERealm.AuthProvider.registryFile=ABLDomainRegistry.keystore
 OERealm.AuthProvider.roles=

   # Declare placeholders for up to 10 OEClientPrincipalFilter
   # properties.  Any number of properties larger than 10 
   # requires customization of authFilters.xml.
   #
   # Any property 'key' value whose first character is a
   # comment (#) is ignored when creating a Client-Principal
   # token
 OERealm.AuthProvider.properties.1.key=#doNotAdd
 OERealm.AuthProvider.properties.1.value=

 OERealm.AuthProvider.properties.2.key=#doNotAdd
 OERealm.AuthProvider.properties.2.value=
 
 OERealm.AuthProvider.properties.3.key=#doNotAdd
 OERealm.AuthProvider.properties.3.value=
 
 OERealm.AuthProvider.properties.4.key=#doNotAdd
 OERealm.AuthProvider.properties.4.value=
 
 OERealm.AuthProvider.properties.5.key=#doNotAdd
 OERealm.AuthProvider.properties.5.value=
 
 OERealm.AuthProvider.properties.6.key=#doNotAdd
 OERealm.AuthProvider.properties.6.value=
 
 OERealm.AuthProvider.properties.7.key=#doNotAdd
 OERealm.AuthProvider.properties.7.value=
 
 OERealm.AuthProvider.properties.8.key=#doNotAdd
 OERealm.AuthProvider.properties.8.value=
 
 OERealm.AuthProvider.properties.9.key=#doNotAdd
 OERealm.AuthProvider.properties.9.value=
 
 OERealm.AuthProvider.properties.10.key=#doNotAdd
 OERealm.AuthProvider.properties.10.value=
 


 ########## 'ad' Authentication Manager properties #########################
 ## Required properties for the 'ad' (Active Directory) Authentication 
 ## Manager.
 ## For all Active Directory authenticaiton manager configuration 
 ## property details refer to:
 ##    conf/oeablSecurity.properties.README
 ##
 ad.ldap.url=ldap://hostname:389
 ad.ldap.rootdn=dc=acme,dc=com

 ## Optional properties for the 'ad' (Active Directory) Authentication 
 ## Manager.
 ## 
 ad.user.domain=acme.com
 ad.AuthoritiesMapper.prefix=ROLE_
 ad.AuthoritiesMapper.convertToUpperCase=true


 ########## 'oauth2' Login Model properties ###############################
 ## Properties for the 'oauth2' Login Model that supplies OAuth2 authorization 
 ## handling for 'Resource Servers' web data service access and 
 ## 'Authorization Servers' for obtaining access & refresh tokens to access a
 ## Resource server's data.
 ## 
 ## Configuring the 'oauth2' Login Model involves 3 levels:
 ##   1) JWT Access/ID token validation (jwtToken.* properties)
 ##   2) OAuth2 Resource Server run-time operations and coordination with OAuth2
 ##      Authorization Server who issues the JWT tokens 
 ##      (oauth2.resSvc.* properties)
 ##   3) Client-Principal generation (see ClientPrincpalFilter.* properties)
 ## 

 ## Required enable/disable of the OAuth2 Resource server support.
 ## The allowable values are {enable}
 oauth2.ResourceServer.enable=enable

 ## Required JWT token handler properties for validating the inbound
 ## JWT/OAuth2 ID token passed by the OAuth2 client as a Bearer token.

 ## The JWT Signature algorithm used by the Authorization Server
 jwtToken.signatureAlg=RS256

 ## The method of obtaining Public/Secret encryption keys from the 
 ## Authorization Server.  Each type has separate properties
 ## following:
 jwtToken.keystore.type=jwk

 ## "jwk": URL path to Authorization Server's JWK distribution
 jwtToken.keystore.jwkurl=https://localhost:8881/path-to-jwk-set

 ## "jwkissuer": URL path to Authorization Server's provider conviguration url
 jwtToken.keystore.jwkIssuerUrl=https://idp.example.com

 ## "mac": JWT Signature's mac secret-key phrase
 jwtToken.macKey=oeph3::B8E894037D0A296A0908F2FAFB0A0148

 ## "jks": JWT Signature's public-key storage and access 
 jwtToken.keystore.path=${catalina.base}/conf/jwtkeys/jwtRsaKeys.jks
 jwtToken.keystore.userid=
 jwtToken.keystore.pwd=oeph3::B8E894037D0A296A0908F2FAFB0A0148
 jwtToken.keystore.alias=sample

 ## After Signature validation, extract key JWT token key assertion values
 jwtToken.defaultRoles=
 jwtToken.usernameField=sub
 jwtToken.mapScopeToRole=true
 jwtToken.scopeToRolePrefix=scope.
 jwtToken.includeAllClaims=true
 jwtToken.scopeNameField=scope

 ## OAuth2 Resource server configuration
 ## An OAuth2 Resource server provides data-services for client applications. The client application
 ## sends an "access token" obtained from an OAuth2 Authorization server, which the Resource server
 ## must validate before it is accepted.  Validation involves obtaining a JWT token that can be
 ## validated by the Resource server and its "claims" used to perform URL access control to the
 ## Resource service's data-services.  The JWT may be obtained as a "self-contained" access token
 ## or by using the access token as an indirect reference to a JWT stored in the issuing Authorization
 ## server.
 ## 
 oauth2.resSvc.tokenServices=oauth2
 oauth2.resSvc.audience=oeablapp
 oauth2.resSvc.realmName=oeoauth
 oauth2.resSvc.userDetailsPrefix=noOP

 ## Optional JWT token handling process
 oauth2.resSvc.stateless=true
 oauth2.resSvc.clientCfg=file:${catalina.base}/webapps/${oeabl.webapp.name}/WEB-INF/oauth2ResSvcClients.cfg
 oauth2.resSvc.requestmatcher=ant
 oauth2.resSvc.csvpath=WEB-INF/oeablSecurityJWT.csv

 ## Advanced JWT token processors
 oauth2.resSvc.remoteTokenService.url=https://localhost:443/oauth/check_token
 oauth2.resSvc.remoteTokenService.loginId=changeme
 oauth2.resSvc.remoteTokenService.loginPwd=changme
 oauth2.resSvc.remoteTokenService.tokenName=token
 oauth2.resSvc.jdbcTokenService.driver=com.mysql.jdbc.Driver
 oauth2.resSvc.jdbcTokenService.url=jdbc:mysql://localhost:3306/spring_security_db 
 oauth2.resSvc.jdbcTokenService.loginId=changeme
 oauth2.resSvc.jdbcTokenService.loginPwd=changeme


 ########## 'tbd' Login Model properties ###################################
 ## Propertied for an optional customAuthorizationFilter bean. 
 ## The custom HTTP Authorization header filter provides a hook into the
 ## Spring Security process for securely handling Authorization headers
 ## that have a custom 'scheme'.  
 ## NOTE: The default class for this filter bean is a NOOP placeholder.
 ## The developer is required to configure the correct Java class
 ## NOTE: customAuthorizationFilter is only enabled in BASIC security
 ## configurations that do not depend upon HTTP session contexts
 customAuthorizationFilter.authPolicy=disabled
 customAuthorizationFilter.authScheme=CHANGEME
 customAuthorizationFilter.authClientType=*
 customAuthorizationFilter.authHeader=Authorization
 customAuthorizationFilter.authErrorDetail=${OESSO.error.detail}
 customAuthorizationFilter.authSecurity=true
 customAuthorizationFilter.ignoreFailure=false
 customAuthorizationFilter.realmChallenge=Custom Authorization Header Realm
 customAuthorizationFilter.tokenSecret=changeme

 customAuthorization.AuthProvider.multiTenant=true
 customAuthorization.AuthProvider.registryFile=ABLDomainRegistry.keystore
 customAuthorization.AuthProvider.userDomain=
 customAuthorization.AuthProvider.expires=0
 customAuthorization.AuthProvider.sealClientPrincipal=true
 customAuthorization.AuthProvider.accntinfo=true
 customAuthorization.AuthProvider.authz=true
 customAuthorization.AuthProvider.roles=
   # Declare placeholders for up to 10 customAuthorization 
   # properties for inserting into a Client-Principal.  
   # Any number of properties larger than 10 requires 
   # customization of customAuthHeaderFilter.xml.
   #
   # Any property 'key' value whose first character is a
   # comment (#) is ignored when creating a Client-Principal
   # token
 customAuthorization.AuthProvider.properties.1.key=#doNotAdd
 customAuthorization.AuthProvider.properties.1.value=

 customAuthorization.AuthProvider.properties.2.key=#doNotAdd
 customAuthorization.AuthProvider.properties.2.value=
 
 customAuthorization.AuthProvider.properties.3.key=#doNotAdd
 customAuthorization.AuthProvider.properties.3.value=
 
 customAuthorization.AuthProvider.properties.4.key=#doNotAdd
 customAuthorization.AuthProvider.properties.4.value=
 
 customAuthorization.AuthProvider.properties.5.key=#doNotAdd
 customAuthorization.AuthProvider.properties.5.value=
 
 customAuthorization.AuthProvider.properties.6.key=#doNotAdd
 customAuthorization.AuthProvider.properties.6.value=
 
 customAuthorization.AuthProvider.properties.7.key=#doNotAdd
 customAuthorization.AuthProvider.properties.7.value=
 
 customAuthorization.AuthProvider.properties.8.key=#doNotAdd
 customAuthorization.AuthProvider.properties.8.value=
 
 customAuthorization.AuthProvider.properties.9.key=#doNotAdd
 customAuthorization.AuthProvider.properties.9.value=
 
 customAuthorization.AuthProvider.properties.10.key=#doNotAdd
 customAuthorization.AuthProvider.properties.10.value=
 
 customAuthorization.UserDetails.realmURL=internal://nxgas
 customAuthorization.UserDetails.realmClass=CustomAuthzHeaderRealm
 customAuthorization.UserDetails.grantedAuthorities=ROLE_PSCUser
 customAuthorization.UserDetails.rolePrefix=ROLE_
 customAuthorization.UserDetails.roleAttrName=ATTR_ROLES
 customAuthorization.UserDetails.enabledAttrName=ATTR_ENABLED
 customAuthorization.UserDetails.lockedAttrName=ATTR_LOCKED
 customAuthorization.UserDetails.expiredAttrName=ATTR_EXPIRED
 customAuthorization.UserDetails.propertiesAttrName=ATTR_PROPERTIES
 customAuthorization.UserDetails.userIdAttrName=ATTR_USERID
 customAuthorization.UserDetails.appendRealmError=false
 customAuthorization.UserDetails.realmTokenFile=
 

 ########## 'sts' Authention Manager properties ############################
 ## OpenEdge Authentication Gateway client configuration 
 ## for direct user logins to a PASOE server
 ##
 sts.AuthProvider.multiTenant=true
 sts.AuthProvider.userDomain=
 sts.UserDetails.stsURL=https://host:port
 sts.UserDetails.stsKeystore=
 sts.UserDetails.clientHeaderName=x-oests-token
 sts.UserDetails.noHostVerify=false
 sts.UserDetails.certLocation=${psc.as.oe.dlc}/certs
 sts.UserDetails.tlsCipherSuites=
 sts.UserDetails.tlsProtocols=
 sts.UserDetails.userAgent=PASOE (Spring)
 sts.UserDetails.sniHost=
 
 
 ########## 'saml' Authention Manager properties ############################
 ## PASOE SAML Token Processing filter
 samlToken.webSSOProcessingFilter.checkForACSEndpointUrl=false
 samlToken.webSSOProcessingFilter.responseSkew=3600
 
 ## Location of Service Provide And Identity Provider Metatdata xml file
 ## Usually it should be inside WEB-INF/metadata/ folder of the webapp
 samlToken.metadata.spMetaDataFileLocation=WEB-INF/metadata/sp.xml
 samlToken.metadata.idpMetaDataFileLocation=WEB-INF/metadata/idp.xml
 
 ## Allow Binding Methods of incoming request with 
 ## SAML token
 samlToken.httpBinding.allowMethods=GET,POST,PUT,DELETE
 
 ## SAML UserDetails
 ## Usually roles comes as part of asseration attribute of SAML token
 ## If there roles are configured with multiple attributes then use comma separated list of attributes
 samlToken.UserDetails.roleAttrName=Attribute1,Attribute2
 ## If there is not roles found in SAMl token then use default roles as PSCUser
 samlToken.UserDetails.defaultGrantedAuthorities=PSCUser
 samlToken.UserDetails.rolePrefix=ROLE_
 samlToken.UserDetails.userDomain=
 samlToken.UserDetails.registryFile=

 ########## MDC (Mapped Diagnostic)   properties ############################
 ## MDC HTTP request header enablement.  Only
 ## the HTTP headers included in this list will
 ## be available as MDC token fields in ABL SessionManager log files.
 MDC.filter.headerList= 


 ########## Spring Security Session Management  ############################
 ## Session management control propreties. Have to be set for the login model used
 ## Properties:
 ## http.session.<login model>.pasoe.createSession
 ##   Defines which type of Spring session is used. 
 ##   Values:
 ##     always - a session will always be created if one doesn't already exist
 ##     ifRequired - a session will be created only if required (default)
 ##     never - the framework will never create a session itself but it will use one if it already exists
 ##     stateless - no session will be created or used by Spring Security
 ##
 ## http.session.<login model>.fixation
 ##   Session Fixation Protection Strategy (doesn't matter if createSession value = stateless)
 ##   Values:
 ##       none (default) - no fixation protection
 ##       newSession - create new session for every login
 ##       migrateSession - create a new session and copy previus session properties 
 ##       changeSessionId - change session id when user logged in
 ##
 ## http.session.<login model>.concurrent
 ##   Concurrent session control for the same user (doesn't matter if createSession value = stateless)
 ##   Values:
 ##      true - enabled
 ##      false (default) - disabled 
 ##
 ## http.session.<login model>.session.expired.url
 ##   Redirect URL is session expired (doesn't matter if councurrent session control is not active )
 ##   Value: 
 ##     valid URL
 ##
 ## http.session.<login model>.error.max.session.exceeded
 ##   Reject request if number of concurrent sessions for the same user exeeded maximum value 
 ##     (doesn't matter if councurrent session control is not active)
 ##   Values:
 ##     true 
 ##     false (default) - expires one of existing sessions
 ##
 ## http.session.<login model>.max.sessions=
 ##   Maximum concurrent sessions for the same user (doesn't matter if councurrent session control is not active)
 ##   Values:
 ##    -1 - no limit
 ##    positive integer value (default value: 1)
 
 ## Default values
 http.session.all.pasoe.createSession=stateless
 http.session.all.fixation=none
 http.session.all.concurrent=false
 http.session.all.session.expired.url=/static/sessionsExceeded.jsp
 http.session.all.error.max.session.exceeded=false
 http.session.all.max.sessions=1
 
 ## Anonymous login model session management
 http.session.anonymous.pasoe.createSession=${http.session.all.pasoe.createSession}
 
 ## Basic login model session magement
 http.session.basic.pasoe.createSession=${http.session.all.pasoe.createSession}
 http.session.basic.fixation=${http.session.all.fixation}
 http.session.basic.concurrent=${http.session.all.concurrent}
 http.session.basic.session.expired.url=${http.session.all.session.expired.url}
 http.session.basic.error.max.session.exceeded=${http.session.all.error.max.session.exceeded}
 http.session.basic.max.sessions=${http.session.all.max.sessions}

 ## Form login model session magement
 http.session.form.pasoe.createSession=always
 http.session.form.fixation=newSession
 http.session.form.concurrent=${http.session.all.concurrent}
 http.session.form.session.expired.url=${http.session.all.session.expired.url}
 http.session.form.error.max.session.exceeded=${http.session.all.error.max.session.exceeded}
 http.session.form.max.sessions=${http.session.all.max.sessions}


 ## Container login model session magement
 http.session.container.pasoe.createSession=${http.session.all.pasoe.createSession}
 http.session.container.fixation=${http.session.all.fixation}
 http.session.container.concurrent=${http.session.all.concurrent}
 http.session.container.session.expired.url=${http.session.all.session.expired.url}
 http.session.container.error.max.session.exceeded=${http.session.all.error.max.session.exceeded}
 http.session.container.max.sessions=${http.session.all.max.sessions}
  
 ## Sso login model session magement
 http.session.sso.pasoe.createSession=${http.session.all.pasoe.createSession}
 
 ## Oauth2 login model session magement
 http.session.oauth2.pasoe.createSession=never
 
 ## Saml login model session magement
 http.session.saml.pasoe.createSession=${http.session.all.pasoe.createSession}
 #######
 
 
 ## Http Headers
 #http.spring.headers.writeHeadersEagerly ::= {false | true}. Default: false
 http.spring.headers.writeHeadersEagerly=false

 #http.spring.headers.cacheControl ::= {true | false}. Default: true
 http.spring.headers.cacheControl=true
 
 #http.spring.headers.contentTypeOptions ::= {true | false}. Default: true
 http.spring.headers.contentTypeOptions=true
 
 #http.spring.headers.hsts ::= {true | false}. Default: true
 http.spring.headers.hsts=true
 #http.spring.headers.hsts.maxAgeInSeconds ::= <Integer value>. Default: 31536000 (approximately one year)
 http.spring.headers.hsts.maxAgeInSeconds=31536000

 #http.spring.headers.hsts.includeSubdomains ::= {true | false}. Default: true
 http.spring.headers.hsts.includeSubdomains=true

 #http.spring.headers.hsts.preload ::= {true | false}. Default: true
 http.spring.headers.hsts.preload=false
 
 #http.spring.headers.frameOptions ::= {true | false}. Default: true
 http.spring.headers.frameOptions=true
 
 #http.spring.headers.frameOptions.policy ::={DENY | ALLOW-FROM | SAMEORIGIN}. Default: DENY
 http.spring.headers.frameOptions.policy=DENY
 #http.spring.headers.frameOptions.allowFrom.strategy ::= {static | whiteList | regEx}
 http.spring.headers.frameOptions.allowFrom.strategy=static
 # http.spring.headers.frameOptions.allowFrom.strategy.value - Depending on strategy
 # if static - valid URL
 # if whiteList - A comma-seperated list containing the allowed domains
 # if regEx - <a regelur expression to validate incoming requests and if they are allowed
 http.spring.headers.frameOptions.allowFrom.strategy.value=

 # http.spring.headers.frameOptions.allowFrom.strategy.fromParameter - Depending on strategy
 # if static - not applied
 # if whiteList or regEx - name of the request parameter to use
 http.spring.headers.frameOptions.allowFrom.strategy.fromParameter=
 
 #http.spring.headers.xssProtection ::= {true | false}. Default: true
 http.spring.headers.xssProtection=true
 #http.spring.headers.xssProtection.block ::= {false | true}. Default: false
 http.spring.headers.xssProtection.block=false
 
 #Cross-Site Request Forgery filter
 #http.spring.csrf ::= { false | true }. Default: false
 http.spring.csrf=false
 
 
