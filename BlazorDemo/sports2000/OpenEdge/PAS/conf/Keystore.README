
Keystore.README

This README provides a brief description of the PAS's use of Java
key and certificate stores in its HTTPS connector.

Storage files:
======================
The default PAS HTTPS configuration uses the Java distribution's JSSE
for all SSL/TLS network connections.  JSSE uses to secure storage 
files: 
    a) a keystore that holds the server's private key & public key 
       (digital certificate)
    b) a certificate trust store that holds ROOT & intermediate CA
       digital certificates that are used to verify and authenticate
       SSL clients who login using a personal digital certificate 

The keystore file is found in CATALINA_BASE/conf/tomcat-keystore.p12,
that uses a PKCS12 type storage format.  A default password is
supplied, whose value is "password".  The type of storage format is
important because a PKCS12 type will allow an administrator to
generate and use private keys & public key certificates generated by
the popular OpenSSL administration utility. The PAS ships with one
self-signed test server certificate.  That test certificate is NOT
usable in any form of production environment, and should be discarded
and/or replaced by a production grade server key and certificate.

The certificate trust store file is also found in
CATALINA_BASE/conf/tomcat-certstore.jks, that uses a the default JAVA
distribution file format JKS.  This type of storage works well for
managing the ROOT and CA digital certificates used in validating
client certificates used to log into the server.  The default password
for this storage file is also "password".  The storage file is shipped
empty and requires the admin to add the certificates of only those CAs
that they want to allow clients to use in logging into their server.

All storage files will support holding multiple entries, where each
entry is identified with an 'alias' name.  This alias name is what you
will use to identify which key/certificate entry to use as the
server's identity, or in listing or deleting individual entries.



Configuration:
======================
You will find in the [Tomcat] CONNECTOR reference documentation a 
number of attributes that provide detailed control over the keystore 
and certificate stores used by JSSE.  Those attributes are found in
the conf/server.xml configuration file, with values that refer to Java
system properties ( ${java-property-name} ).  PAS provides external 
control over those attribute's values via Java properties contained 
in the catalina.properties file, which are easier to maintain than an
xml file.  The control properties are:

    PAS properties          Tomcat CONNECTOR attribute
    =============================================================
    psc.as.https.keypass    keystorePass
    psc.as.https.keyalias   keyAlias
    psc.as.https.storeType  keystoreType
    psc.as.https.trustpass  truststorePass
    psc.as.https.trustType  truststoreType
    psc.as.https.clientauth clientAuth

The tcman command line utility can be used to manage all of the
psc.as.https properties:
    tcman{.sh|.bat} config [property-name]
    tcman{.sh|.bat} config property-name=<new-value>

To enable SSL client authentication configure psc.as.https.clientauth
to have a value of either 'required' or 'optional'.  The 'required' value requires
all SSL clients to supply a digital certificate to log into the
server.  The 'optional' value allows an SSL client to optionally supply a
digital certificate to log into the server.  The latter is useful in
the case where some web applications accept SSL client authentication
and others do not.

    THE DEFAULT KEY STORE AND CERTIFICATE TRUST STORE PASSWORDS
    SHOULD BE CHANGED FOR PRODUCTION INSTALLATIONS!!!

Unless you change the tomcat-keystore.p12 or tomcat-certstore.jsk
file types, you do not have to change the psc.as.https.xxxxType Java
system properties.


Managing server key and certificate:
=====================================
You will use the Java distribution's 'keytool' command line utility to
manage both the tomcat-keystore.p12 and tomcat-certstore.jks storage
files.  The 'keytool' utility's command line can be long, so it is
recommended that you use some type of shell shortcut to make it
easier.  For example:

    Unix tomcat-keystore.p12:
    alias keytool=keytool -keystore tomcat-keystore.p12 -storetype \
        PKCS12 -storepass <password> 

    Windows tomcat-keystore.p12:
    set keytool=keytool.bat -keystore tomcat-keystore.p12 -storetype \
        PKCS12 -storepass <password> 

    Unix tomcat-certstore.jks:
    alias keytool=keytool -keystore tomcat-certstore.jks -storetype \
        JKS -storepass <password> 

    Windows tomcat-certstore.jks:
    set keytool=keytool.bat -keystore tomcat-certstore.jks -storetype \
        JKS -storepass <password> 

    keytool <-command> [ <-command-options> ]

    %keytool% <-command> [ <-command-options> ]



Keytool command tips:
===================================
    'keytool help'  for a full list of commands

    =======================

    'keytool -importkeystore ... '  import a server key &
                                    certificate generated via
                                    openssl utility into a .p12
                                    file

    example: keytool -importkeystore -srckeystore <p12-file> \
                     -srcstoretype PKCS12 

    =======================

    'keytool -importcert...'        import a CA/intermediate
                                    certificate for validation into a
                                    .jks file

    example: keytool -importcert -trustcacerts -alias <name> -file <cert-file>

    =======================


    'keytool -genkeypair..'         generates a public/private
                                    encryption keys for obtaining a
                                    server certificate

    example: keytool -genkeypair -alias myserver -keyalg RSA -keysize 2048

    =======================


    'keytool -certreq...'           Generate a digital certificate
                                    request before requesting a server
                                    certificate be generated by a
                                    public CA

    example: keytool -certreq -alias myserver -file <csr-file>


    Refer to the Java distribution reference documentation for more
    information and examples about using the 'keytool' utility.

    Refer to the OpenSSL reference documentation for more information
    and examples about using the 'openssl' utility to generate server 
    private key and digital certificates in a .p12 file format.



